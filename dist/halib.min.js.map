{"version":3,"sources":["halib.js"],"names":[],"mappings":"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","file":"halib.min.js","sourcesContent":["//   Halib.js 1.0.0\r\n//   http://github.com/halibjs/halib\r\n//   (c) 2018 Mátyás Kiss\r\n//   Halib may be freely distributed under the MIT licence\r\n\r\n\r\nconst isString = x => typeof x === 'string';\r\nconst isNumber = x => typeof x === 'number';\r\nconst isArr = xs => xs && xs.constructor === Array;\r\nconst copyAS = xs => _copyA(xs, 0, _len(xs), isString(xs));\r\nconst emptyAS = xs => isString(xs) ? '' : [];\r\nconst _chars = str => str.split('');\r\nconst _unchars = arr => arr.join('');\r\nconst _len = xs => xs.length;\r\nconst _nul = xs => _len(xs) === 0;\r\nconst bothStr = (x, y) => isString(x) && isString(y);\r\nconst arrOrStr = (x, y) => (isArr(x) && isArr(y)) || bothStr(x, y);\r\nconst cat = (xs, ys) => xs.concat(ys);\r\nconst _eq = fn => (x, y) => _equal(fn(x), fn(y));\r\nconst _cmp = (x, y) => x < y ? -1 : (x > y ? 1 : 0);\r\nconst _desc = (x, y) => x < y ? 1 : (x > y ? -1 : 0);\r\nconst gt = (x, y) => x > y;\r\nconst _gt = fn => (x, y) => fn(x) > fn(y);\r\nconst lt = (x, y) => x < y;\r\nconst _lt = fn => (x, y) => fn(x) < fn(y);\r\nconst gt_cmp = cmp => (x, y) => cmp (x, y) > 0;\r\nconst lt_cmp = cmp => (x, y) => cmp (x, y) < 0;\r\nconst gte = (x, y) => x >= y;\r\nconst fn_eq = (fn, x, _, e) => fn(x, e);\r\nconst _returnL = x => [x];\r\nconst fn_each = (fn, x, ind) => fn(x, ind);\r\nconst NUL = {};\r\nconst opsString = (a, b) => isString(a) && (b === null || isString(b));\r\nconst _id = x => x;\r\nconst secFn = (xs, ind, i) => _slice(xs, ind, i, isString(xs));\r\nconst secHFn = (xs, ind) => xs[ind];\r\nconst toString = Object.prototype.toString;\r\nconst isChar = c => isString(c) && !!_len(c);\r\n\r\nconst _copyA = (xs, ind, xlen, str) => {\r\n    const res = Array(xlen);\r\n    while (ind < xlen) { res[ind] = xs[ind]; ind++; }\r\n    return str ? _unchars(res) : res;\r\n};\r\n\r\nconst _slice = (xs, start, end, str) => {\r\n    let xlen = _len(xs);\r\n    start = trans(start, xlen);\r\n    end = end < 0 ? end + xlen : end > xlen ? xlen : end;\r\n    xlen = start > end ? 0 : end - start;\r\n    const res = Array(xlen);\r\n    let ind = 0;\r\n    while (ind < xlen) { res[ind] = xs[ind + start]; ind++; };\r\n    return str ? _unchars(res) : res;\r\n};\r\n\r\nconst _copy = (res, xs, ind, len, idx) => {\r\n    idx = isNumber(idx) ? idx : _len(res);\r\n    while (ind < len) res[idx++] = xs[ind++];\r\n    return idx;\r\n};\r\n\r\nconst _each = (fn, xs) => {\r\n    const len  = _len(xs);\r\n    let ind = 0;\r\n    \r\n    while (ind < len) {\r\n        fn(xs[ind], ind);\r\n        ind++;\r\n    }\r\n    return xs;\r\n};\r\n\r\nconst _map = (fn, xs) => {\r\n    const len = _len(xs);\r\n    const res = Array(len);\r\n    let ind = 0;\r\n\r\n    while (ind < len) {\r\n        res[ind] = fn(xs[ind], ind);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _concat = (xs, fn, rlen) => {\r\n    const xlen = _len(xs);\r\n    const res = Array(rlen);\r\n    let ind = 0;\r\n    let idx = 0;\r\n    let str = xlen;\r\n    let item;\r\n\r\n    while (ind < xlen) {\r\n        item = fn(xs[ind], ind);\r\n        if (str) str = isString (item);\r\n        idx = _copy(res, item, 0, _len(item), idx);\r\n        ind++;\r\n    }\r\n    return str ? _unchars(res) : res;\r\n};\r\n\r\nconst eqArr = (xs, ys, stx, sty) => {\r\n    const xlen = _len(xs);\r\n    let ind;\r\n        \r\n    if (xlen !== _len(ys)) return false;\r\n\r\n    for (ind = 0; ind < xlen; ind++) {\r\n        if (!_equal(xs[ind], ys[ind], stx, sty)) return false;\r\n    }\r\n    stx.pop(); sty.pop();\r\n    return true;\r\n};\r\n\r\nconst eqObj = (x, y, stx, sty) => {\r\n    const xkeys = keys(x);\r\n    const ykeys = keys(y);\r\n    const xlen = _len(xkeys);\r\n    let ind, key;\r\n\r\n    if (xlen !== _len(ykeys) || _len(deleteAll(xkeys)(ykeys))) return false;\r\n    for (ind = 0; ind < xlen; ind++) {\r\n        key = xkeys[ind];\r\n        if (!_equal(x[key], y[key], stx, sty)) return false;\r\n    }\r\n    stx.pop(); sty.pop();\r\n    return true;\r\n};\r\n\r\nconst prim = x => x == null || typeof x !== 'object';\r\nconst _equal = (x, y, stx, sty) => x === y || (prim(x) || prim(y) ? x !== x && y !== y : deepEqual(x, y, stx, sty));\r\n\r\nconst deepEqual = (x, y, stx, sty) => {\r\n    const type = toString.call(x);\r\n    if (type !== toString.call(y)) return false;\r\n    if (type === '[object Date]') return x.valueOf() === y.valueOf();\r\n    stx = stx || []; sty = sty || [];\r\n    let ind = _len(stx);\r\n    while (ind--) if(stx[ind] === x) return sty[ind] === y;\r\n    stx.push(x); sty.push(y);\r\n    return (type === '[object Array]' ? eqArr : eqObj)(x, y, stx, sty);\r\n};\r\n\r\nconst eqSlice = (xs, ys, xlen, offset) => {\r\n    let ind = 0;\r\n    while (ind < xlen && _equal(xs[ind], ys[ind + offset])) ind++;\r\n    return ind === xlen;\r\n};\r\n\r\nconst prefix = (xs, ys, xlen, ind) => xlen === 0 || xlen > _len(ys) ? false : eqSlice (xs, ys, xlen, ind);\r\n\r\nconst _seq = (xs, ys) => {\r\n    const xlen = _len(xs);\r\n    if (!xlen) return -1;\r\n    const max = _len(ys) - xlen + 1;\r\n    let ind = 0;\r\n\r\n    while (ind < max) {\r\n        if(eqSlice(xs, ys, xlen, ind)) return ind;\r\n        ind++;\r\n    }\r\n    return -1;\r\n};\r\n\r\nconst _indices = (res, _, __, index) => (res[_len(res)] = index, res);\r\n\r\nconst _delall = (res, ys, ind, index, toIns) => {\r\n    _copy(res, ys, ind, index);\r\n    if (toIns) _copy(res, toIns, 0, _len(toIns));\r\n    return res;\r\n};\r\n\r\nconst _seqAll = (toDel, xs, res, fn, toIns) => {\r\n    const dlen = _len(toDel);\r\n    const xlen = _len(xs);\r\n    const max = _len(xs) - dlen + 1;\r\n    const del = toIns !== NUL;\r\n    let index = 0;\r\n    let ind = 0;\r\n\r\n    if (dlen) {\r\n        while (index < max) {\r\n            if (eqSlice(toDel, xs, dlen, index)) {\r\n                res = fn(res, xs, ind, index, toIns);\r\n                ind = index = index + dlen;\r\n            }\r\n            else index++;\r\n        }\r\n    }\r\n    if (del) fn (res, xs, ind, xlen);\r\n    return del && isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _copyB = (res, xs, _, __, idx) => (res[idx++] = xs, idx);\r\nconst trans = (ind, xlen) => ind < 0 ? ind < -xlen ? 0 : ind + xlen : ind;\r\n\r\nconst _sec = (ind, dlen, xs, seq, toIns, fn = gte) => {\r\n    const xlen = _len(xs);\r\n    ind = trans(ind, xlen);\r\n    if (fn(ind, _len(xs))) return copyAS(xs);\r\n    if (dlen < 0) dlen = 0;\r\n    const del = toIns === NUL;\r\n    const from = ind + dlen;\r\n    const ilen = del ? 0 : (seq ? _len(toIns) : 1);\r\n    const res = Array(ind + ilen + (xlen - from));\r\n    const fnn = seq ? _copy : _copyB;\r\n    let idx  = 0;\r\n\r\n    idx = _copy(res, xs, 0, ind, idx);\r\n    idx = del ? idx : fnn(res, toIns, 0, ilen, idx);\r\n    _copy(res, xs, from, xlen, idx);\r\n    \r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst secc = (ind, dlen, xs, seq, toIns) => ind === -1 ? copyAS(xs) : _sec(ind, dlen, xs, seq, toIns); \r\n\r\nconst _delAll = (e, xs, toIns) => {\r\n    if (bothStr(e, xs)) return _seqAll (e, xs, [], _delall, (toIns === NUL ? undefined : toIns));\r\n    const res = [];\r\n    const xlen = _len(xs);\r\n    let ind = 0;\r\n    let idx = 0;\r\n\r\n    while (ind < xlen) {\r\n        if (_equal(e, xs[ind])) { if (toIns !== NUL) res[idx++] = toIns; }\r\n        else res[idx++] = xs[ind];\r\n        ind++;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _from = (num, n, step, str, ind) => {\r\n    const res = Array(n);\r\n\r\n    while (ind < n) {\r\n        res[ind++] = num;\r\n        num += step;\r\n    }\r\n    return str ? String.fromCharCode.apply(null, res) : res;\r\n};\r\n\r\nconst insSort = (xs, low, high, fn) => {\r\n    let tmp, ind;\r\n    let index = low + 1;\r\n\r\n    for (; index <= high; index++) {\r\n        tmp = xs[index];\r\n        for (ind = index - 1; ind >= low && fn(xs[ind], tmp); ind--) xs[ind + 1] = xs[ind];\r\n        xs[ind + 1] = tmp;\r\n    }\r\n    return xs;\r\n};\r\n\r\nconst _merge = (xs, ys, fn) => {\r\n    const xlen = _len(xs);\r\n    const ylen = _len(ys);\r\n    const res = Array(xlen + ylen);\r\n    let idx = 0;\r\n    let indx = 0;\r\n    let indy = 0;\r\n\r\n    while (indx < xlen && indy < ylen){\r\n        res[idx++] = fn(xs[indx], ys[indy]) ? ys[indy++] : xs[indx++];\r\n    }\r\n    \r\n    while (indx < xlen) res[idx++] = xs[indx++];\r\n    while (indy < ylen) res[idx++] = ys[indy++];\r\n\r\n    return res;\r\n};\r\n\r\nconst msort = (xs, fn) => {\r\n    const str = isString(xs);\r\n    const len = _len(xs);\r\n\r\n    const ms = xs => {\r\n        const len = _len(xs);\r\n        if (len < 30) return insSort(xs, 0, len - 1, fn);\r\n        const mid = len >>> 1;\r\n        return _merge (ms(_copyA(xs, 0, mid)), ms(_slice(xs, mid, len)), fn);\r\n    };\r\n\r\n    const res = ms(len < 30 ? (str ? _chars(xs) : _copyA(xs, 0, len)) : xs);\r\n    return str ? _unchars(res) : res;\r\n};\r\n\r\nconst swap = (arr, i, j) => {\r\n    const tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n};\r\n\r\nconst med3 = (arr, low, high, fn) => {\r\n    const mid = (low + high) >>> 1;\r\n    const larger = fn(arr[low], arr[mid]) ? low : mid;\r\n    if (fn(arr[larger], arr[high])) swap(arr, larger, high);\r\n    if (fn(arr[low], arr[mid])) swap(arr, low, mid);\r\n    return arr[mid];\r\n};\r\n\r\nconst partitionHoare = (arr, low, high, fn) => {\r\n    const p = med3(arr, low, high, fn);\r\n\r\n    while (true) {\r\n        while (fn(p, arr[++low]));\r\n        while (fn(arr[--high], p));\r\n        if (low < high) swap(arr, low, high);\r\n        else return high;\r\n    }\r\n};\r\n\r\nconst qsort = (xs, fn) => {\r\n    const arr = _copyA(xs, 0, _len(xs));\r\n    const stack = [];\r\n    let top = 0;\r\n    let high = _len(xs) - 1;\r\n    let low = 0;\r\n    let p;\r\n\r\n    stack[top++] = low;\r\n    stack[top++] = high;\r\n\r\n    while (top > 0) {\r\n        high = stack[--top];\r\n        low = stack[--top];\r\n\r\n        while (high > low) {\r\n            if (high - low < 30) {\r\n                insSort(arr, low, high, fn);\r\n                high = low;\r\n            }\r\n            else {\r\n                p = partitionHoare(arr, low, high, fn);\r\n                stack[top++] = p+1;\r\n                stack[top++] = high;\r\n                high = p;\r\n            }\r\n        }\r\n    }\r\n    return isString(xs) ? _unchars(arr) : arr;\r\n};\r\n\r\nconst _insert = (e, xs, fn) => {\r\n    const xlen = _len(xs);\r\n    const res = Array(xlen + 1);\r\n    let idx = 0;\r\n    let ind = 0;\r\n\r\n    while (ind < xlen && idx === ind) {\r\n        res[idx++] = fn(e, xs[ind]) ? xs[ind++] : e;\r\n    }\r\n\r\n    if (idx === ind) { res[idx] = e; return res; }\r\n    while (ind < xlen) res[idx++] = xs[ind++];\r\n    return res;\r\n};\r\n\r\nconst _elemBy = (e, xs, eq) => {\r\n    const xlen = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        if (eq(e, xs[ind])) return true;\r\n        ind++;\r\n    }\r\n    return false;\r\n};\r\n\r\nconst indexgcBy = (e, xs, eq) => {\r\n    const xlen = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        if (eq(e, xs[ind][0])) return ind;\r\n        ind++;\r\n    }\r\n    return -1;\r\n};\r\n\r\nconst _nubbBy = (xs, res, eq) => {\r\n    const xlen = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        if (!_elemBy(xs[ind], res, eq)) res.push(xs[ind]);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _uniqBy = (xs, eq) => {\r\n    const xlen = _len(xs);\r\n    const res = [];\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        if (!_elemBy(xs[ind], res, eq)) res.push(xs[ind]);\r\n        else return false;\r\n        ind++;\r\n    }\r\n    return true;\r\n};\r\n\r\nconst groupAdd = (res, _, x) => res[_len(res)] = [x];\r\nconst groupInc = (res, idx, x) => res[idx][_len(res[idx])] = x;\r\nconst countAdd = (res, _, x) => res[_len(res)] = [x, 1];\r\nconst countInc = (res, idx, _) => res[idx][1]++;\r\n\r\nconst gcBy = (xs, fnAdd, fnInc, eq, gr) => {\r\n    const xlen = _len(xs);\r\n    const res = [];\r\n    let ind = 0;\r\n    let idx, x;\r\n\r\n    while (ind < xlen) {\r\n        x = xs[ind];\r\n        idx = indexgcBy(x, res, eq);\r\n        if (idx !== -1) fnInc(res, idx, x);\r\n        else fnAdd(res, 0, x);\r\n        ind++;\r\n    }\r\n    return gr && isString(xs) ? map (_unchars) (res) : res;\r\n};\r\n\r\nconst readBy = (e, xs, eq) => {\r\n    const xlen = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        if (eq(e, xs[ind][0])) {\r\n            if (xs[ind][1] > 0) {\r\n                xs[ind][1]--;\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        ind++;\r\n    }\r\n    return true;\r\n};\r\n\r\nconst _minusBy = (xs, ys, eq) => {\r\n    const xlen = _len(xs);\r\n    const res = [];\r\n    let ind = 0;\r\n    ys = gcBy(ys, countAdd, countInc, eq);\r\n    \r\n    while (ind < xlen) {\r\n        if (readBy(xs[ind], ys, eq)) res.push(xs[ind]);\r\n        ind++;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst dallBy = (e, xs, eq, res) => !_elemBy(e, xs, eq) ? res.push(e) : 0;\r\nconst kallBy = (e, xs, eq, res) =>  _elemBy(e, xs, eq) ? res.push(e) : 0;\r\nconst diffBy = (e, xs, eq, res) => !_elemBy(e, xs, eq) && !_elemBy(e, res, eq) ? res.push(e) : 0;\r\nconst intsBy = (e, xs, eq, res) =>  _elemBy(e, xs, eq) && !_elemBy(e, res, eq) ? res.push(e) : 0;\r\n\r\nconst _dkdi = (xs, ys, fn, eq) => {\r\n    const xlen = _len(xs);\r\n    const res = [];\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        fn(xs[ind], ys, eq, res);\r\n        ind++;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _unionBy = (xs, ys, eq, res = _nubbBy(ys, _nubbBy(xs, [], eq), eq)) => isString(xs) ? _unchars(res) : res;\r\nconst _nubBy = (xs, eq, res = _nubbBy(xs, [], eq)) => isString(xs) ? _unchars(res) : res;\r\n\r\nconst _nubSorted = (xs, res, add) => {\r\n    const xlen = _len(xs);\r\n    if (!xlen) return res;\r\n    let ind = 0;\r\n    let first;\r\n\r\n    first = add(res, xs[ind++]);\r\n    while (ind < xlen) {\r\n        first = first === xs[ind] ? first : add(res, xs[ind]);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst rest = (ind, xlen, fn, xs, res, z) => { for (;ind < xlen; ind++) z = fn(res, xs[ind], z); return z;};\r\n\r\nconst setOrd = (xs, ys, cmp, fn1, fn2, fn3, fn4, res, go, u) => {\r\n    const xlen = _len(xs);\r\n    const ylen = _len(ys);\r\n    let indx = 0;\r\n    let indy = 0;\r\n    let z = NUL;\r\n    let x, y, cres;\r\n\r\n    while (indx < xlen && indy < ylen) {\r\n        x = xs[indx]; y = ys[indy];\r\n        cres = cmp(x, y);\r\n        if (cres === 0)    { indx++;  z = fn1(res, x, z); indy = fn4(indy);  }\r\n        else if (cres < 0) { indx++;  z = fn2(res, x, z); }\r\n        else               { indy++;  z = fn3(res, y, z); }\r\n    }\r\n    \r\n    if (go) z = rest (indx, xlen, fn2, xs, res, z);\r\n    if (u) rest (indy, ylen, fn3, ys, res, z);\r\n};\r\n\r\nconst no = () => {};\r\nconst noz = (_, __, z) => z;\r\nconst ad = (res, x) => res[_len(res)] = x;\r\nconst adz = (res, x, z) => x !== z ? ad(res, x) : x;\r\nconst _inc = x => x + 1;\r\n\r\nconst mdk = (xs, ys, fn, go) => {\r\n    const res = [];\r\n    setOrd(xs, ys, _cmp, go?no:ad, go?ad:no, no, fn, res, go, false);\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst isd = (xs, ys, fn, go) => {\r\n    const res = [];\r\n    setOrd(xs, ys, _cmp, go?noz:adz, go?adz:noz, noz, fn, res, go, false);\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _union = (xs, ys) => {\r\n    const res = [];\r\n    setOrd(xs, ys, _cmp, adz, adz, adz, _inc, res, true, true);\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _inits = (xs, ind, len, mod, fn) => {\r\n    const res = Array(len + 1);\r\n    const last = mod > 0 ? 0 : 1;\r\n    const xlen = len + last;\r\n    let ys = copyAS (xs);\r\n\r\n    while (ind >= last && ind < xlen) {\r\n        res[ind] = ys;\r\n        ys = fn (ys);\r\n        ind += mod;\r\n    }\r\n    \r\n    res[ind] = ys;\r\n    return res;\r\n};\r\n\r\nconst _index = (xs, e) => {\r\n    const len = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < len) {\r\n        if (_equal(xs[ind], e)) return ind;\r\n        ind++;\r\n    }\r\n    return -1;\r\n};\r\n\r\nconst _indexLast = (eq, xs, e) => {\r\n    let ind = _len(xs);\r\n\r\n    while (ind--) {\r\n        if (eq(xs[ind], e)) return ind;\r\n    }\r\n    return -1;\r\n};\r\n\r\nconst _find = (pred, xs, idx) => {\r\n    const len = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < len) {\r\n        if (pred(xs[ind], ind)) return idx ? ind : xs[ind];\r\n        ind++;\r\n    }\r\n    return idx ? -1 : idx;\r\n};\r\n\r\nconst _findLast = (pred, xs, idx) => {\r\n    let ind = _len(xs);\r\n\r\n    while (ind--) {\r\n        if (pred(xs[ind], ind)) return idx ? ind : xs[ind];\r\n    }\r\n    return idx ? -1 : idx;\r\n};\r\n\r\nconst _elemIndices = (mfn, eq_pred, res,xs, e) => {\r\n    const xlen = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        if(mfn(eq_pred, xs[ind], ind, e)) res.push(ind);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _section = (xs, eq, fn, sH) => {\r\n    const len = _len(xs);\r\n    const res = [];\r\n    let idx = 0;\r\n    let ind = 0;\r\n    let i;\r\n\r\n    while (ind < len) {\r\n        i = ind + 1;\r\n        while (i < len && eq(xs[ind], xs[i])) i++;\r\n        res[idx++] = fn(xs, ind, i);\r\n        ind = i;\r\n    }\r\n    return sH && isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst fn_one = _ => 1;\r\nconst fn_count = (arr, _) => arr[1]++;\r\nconst fn_push_K = (arr, x) => arr[1].push(x);\r\nconst fn_push = (arr, x) => arr.push(x);\r\n\r\nconst _group = (xs, byKey, fn_start, fn_add, fn) => {\r\n    const nums = {};\r\n    const strs = Object.create(null);\r\n    const res = [];\r\n    const xlen = _len(xs);\r\n    let ind = 0;\r\n    let item, key, obj, index;\r\n\r\n    while (ind < xlen) {\r\n        item = xs[ind];\r\n        key = fn(item);\r\n        obj = isString(key) ? strs : nums;\r\n        index = obj[key];\r\n        if (index === undefined) res[obj[key] = _len(res)] = byKey ? [key, fn_start(item)] : fn_start(item);\r\n        else fn_add(res[index], item);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst grOAdd = (xs, item) => (xs.push(item), xs);\r\n\r\nconst _groupObj = (xs, fn_start, fn_add, fn, gr) => {\r\n    const res = {};\r\n    const xlen = _len(xs);\r\n    let ind = 0;\r\n    let item, key;\r\n\r\n    while (ind < xlen) {\r\n        item = xs[ind];\r\n        key = fn(item);\r\n        res[key] = res[key] ? fn_add(res[key], item) : fn_start(item);\r\n        ind++;\r\n    }\r\n    return gr && isString(xs) ? _mapObj(_unchars, res) : res;\r\n};\r\n\r\nconst newSet = (map, key) => { map[key] = true; };\r\nconst nubSet = (map, key, res, x) => { if (!map[key]) { map[key] = true; res.push(x);} };\r\nconst _dall  = (map, key, res, x) => { if (!map[key]) res.push(x); };\r\nconst _keep  = (map, key, res, x) => { if (map[key]) res.push(x); };\r\nconst writeMap = (map, key) => { if (map[key]) map[key]++; else map[key] = 1; };\r\nconst readMap = (map, key, res, x) => { if(map[key]) map[key]--; else res.push(x); };\r\nconst intSet = (map, key, res, x) => { if (map[key]) { map[key] = false; res.push(x);} };\r\n\r\nconst _setops = (sfn, xs, nums, strs, res, fn) => {\r\n    const xlen = xs ? _len(xs) : 0;\r\n    let ind = 0;\r\n    let key;\r\n\r\n    while (ind < xlen) {\r\n        key = fn(xs[ind]);\r\n        sfn(isString(key) ? strs : nums, key, res, xs[ind]);\r\n        ind++;\r\n    }\r\n};\r\n\r\nconst ops = (fn1, fn2, xs, ys, fn) => {\r\n    const nums = {};\r\n    const strs = Object.create(null);\r\n    const res = [];\r\n\r\n    _setops (fn1, ys, nums, strs, res, fn);\r\n    _setops (fn2, xs, nums, strs, res, fn);\r\n\r\n    return (fn1 === fn2 ? opsString(ys, xs) : isString(xs)) ? _unchars(res) : res;\r\n};\r\n\r\nconst pair = (x, y) => [x, y];\r\n\r\nconst _prod = (fn, pair, xs, ys) => {\r\n    const xlen = _len(xs);\r\n    const ylen = _len(ys);\r\n    const res = Array(xlen * ylen);\r\n    const fnn = pair && bothStr(xs, ys) ? (x, y, a, b) => _unchars(fn(x, y, a, b)) : fn;\r\n    let idx = 0;\r\n    let indx = 0;\r\n    let indy;\r\n\r\n    while (indx < xlen) {\r\n        indy = 0;\r\n        while (indy < ylen) {\r\n            res[idx++] = fnn(xs[indx], ys[indy], indx, indy);\r\n            indy++;\r\n        }\r\n        indx++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst comb2 = (res, len, xs, str, mod) => {\r\n    const fn = str ? _unchars : _id;\r\n    let idx = 0;\r\n    let indx = 0;\r\n    let indy;\r\n\r\n    while (indx < len) {\r\n        indy = indx + mod;\r\n        while (indy < len) {\r\n            res[idx++] = fn([xs[indx], xs[indy]]);\r\n            indy++;\r\n        }\r\n        indx++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _zip = (fn, pair, xs, ys) => {\r\n    const len = Math.min (_len(xs), _len(ys));\r\n    const res = Array (len);\r\n    const fnn = pair && bothStr(xs, ys) ? (x, y, a) => _unchars(fn(x, y, a)) : fn;\r\n    let ind = 0;\r\n    \r\n    while (ind < len) {\r\n        res[ind] = fnn(xs[ind], ys[ind], ind);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _unzip = (xss, fn, mmlen) => {\r\n    const xlen = _len(xss);\r\n    const mlen = xlen > 0 ? mmlen(xss) : 0;\r\n    const fnn = _all(isString, xss) ? (a, b, c, d, e) => _unchars(fn(a, b, c, d, e)) : fn;\r\n    const res = Array(mlen);\r\n    let ind;\r\n    \r\n    for (ind = 0; ind < mlen; ind++) {\r\n        res[ind] = fnn (xss, ind, xlen, 0, mlen);\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _zip3 = (xss, ind) => [xss[0][ind], xss[1][ind], xss[2][ind]];\r\n\r\nconst _zipM = (xss, ind, xlen, indx) => {\r\n    const res = Array (xlen);\r\n    for (; indx < xlen; indx++) res[indx] = xss[indx][ind];\r\n    return res;\r\n};\r\n\r\nconst _rotRight = (xss, ind, xlen, indx) => {\r\n    const res = Array (xlen);\r\n    const xlast = xlen - 1;\r\n    for (; indx < xlen; indx++) res[indx] = xss[xlast - indx][ind];\r\n    return res;\r\n};\r\n\r\nconst _rotLeft = (xss, ind, xlen, indx, mlen) => {\r\n    const res = Array (xlen);\r\n    const mlast = mlen - 1;\r\n    for (; indx < xlen; indx++) res[indx] = xss[indx][mlast - ind];\r\n    return res;\r\n};\r\n\r\nconst _zipLongest = (xss, ind, xlen, indx) => {\r\n    const res = [];\r\n    for (; indx < xlen; indx++) {\r\n        if (_len(xss[indx]) > ind)\r\n            res.push(xss[indx][ind]);\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _isUniq = (xs, fn) => {\r\n    const xlen = _len(xs);\r\n    const nums = {};\r\n    const strs = Object.create(null);\r\n    let ind = 0;\r\n    let key, map;\r\n\r\n    while (ind < xlen) {\r\n        key = fn(xs[ind]);\r\n        map = isString(key) ? strs : nums;\r\n        if (map[key]) return false;\r\n        else map[key] = true;\r\n        ind++;\r\n    }\r\n    return true;\r\n};\r\n\r\nconst _while = (fn, pred, xs) => {\r\n    const len = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < len && pred(xs[ind], ind)) ind++;\r\n    return fn (ind) (xs);\r\n};\r\n\r\nconst _whileLast = (fn, pred, xs) => {\r\n    let ind = _len(xs);\r\n    while (ind-- && pred(xs[ind], ind));\r\n    return fn (ind + 1) (xs);\r\n};\r\n\r\nconst _foldl = (fn, res, xs) => {\r\n    const xlen = _len(xs);\r\n    let ind = -1;\r\n    if (res === NUL) res = xs[++ind];\r\n    while (++ind < xlen) res = fn(res, xs[ind], ind);\r\n    return res;\r\n};\r\n\r\nconst _foldr = (fn, res, xs) => {\r\n    let ind = _len(xs);\r\n    if (res === NUL) res = xs[--ind];\r\n    while (ind-- > 0) res = fn(xs[ind], res, ind);\r\n    return res;\r\n};\r\n\r\nconst _scanl = (fn, z, xs) => {\r\n    const mod = z === NUL ? 0 : 1;\r\n    const res = Array(_len(xs) + mod);\r\n    if (_len(res)) res[0] = mod ? z : xs[0];\r\n    _foldl ((z, x, ind) => res[ind + mod] = fn(z, x, ind), z, xs);\r\n    return res;\r\n};\r\n\r\nconst _scanr = (fn, z, xs) => {\r\n    const mod = z === NUL ? 0 : 1;\r\n    const res = Array(_len(xs) + mod);\r\n    if (_len(res)) res[_len(res) - 1] = mod ? z : xs[_len(xs) - 1];\r\n    _foldr ((x, z, ind) => res[ind] = fn(x, z, ind), z, xs);\r\n    return res;\r\n};\r\n\r\nconst _iterNum = (n, fn, x) => {\r\n    let ind = -1;\r\n    while (++ind < n) x = fn(x, ind);\r\n    return x;\r\n};\r\n\r\nconst _iterWhile = (pred, fn, x) => {\r\n    let res;\r\n    while (pred (x)) { res = x; x = fn(x); }\r\n    return res;\r\n};\r\n\r\nconst _until = (pred, fn, x) => {\r\n    while (!pred(x)) x = fn(x);\r\n    return x;\r\n};\r\n\r\nconst _iterateNum = (n, fn, x) => {\r\n    const res = Array(n + 1);\r\n    _iterNum (n, (x, ind) => res[ind + 1] = fn(x, ind), res[0] = x);\r\n    return res;\r\n};\r\n\r\nconst _iterateWhile = (pred, fn, x) => {\r\n    const res = [];\r\n    _iterWhile (pred, x => (res.push(x), fn(x)), x);\r\n    return res;\r\n};\r\n\r\nconst _untilA = (pred, fn, x) => {\r\n    const res = [x];\r\n    _until (pred, x => res[_len(res)] = fn(x), x);\r\n    return res;\r\n};\r\n\r\nconst _iter = (n_pred, fn, x) => (isNumber (n_pred) ? _iterNum : _iterWhile) (n_pred, fn, x);\r\nconst _iterate = (n_pred, fn, x) => (isNumber (n_pred) ? _iterateNum : _iterateWhile) (n_pred, fn, x);\r\n\r\nconst _cp = (fns, res) => {\r\n    let ind = _len(fns);\r\n    while (ind--) res = fns[ind](res);\r\n    return res;\r\n};\r\n\r\nconst _chain = (fns, res) => {\r\n    const flen = _len(fns);\r\n    let ind = 0;\r\n    while (ind < flen) res = fns[ind++](res);\r\n    return res;\r\n};\r\n\r\nconst copyComb = (pos, xs, str) => {\r\n    const ilen = _len(pos);\r\n    const last = ilen - 1;\r\n    const res = Array(ilen);\r\n    let ind = 0;\r\n\r\n    while (ind < ilen) { res[last - ind] = xs[pos[ind]]; ind++; }\r\n    return str ? _unchars(res) : res;\r\n};\r\n\r\nconst copyPerm = (pos, xs, to, str) => {\r\n    const res = Array(to);\r\n    let ind = 0;\r\n\r\n    while (ind < to) { res[ind] = xs[pos[ind]]; ind++; }\r\n    return str ? _unchars(res) : res;\r\n};\r\n\r\nconst copyProd = (xss, pos, xlen, str) => {\r\n    const res = Array(xlen);\r\n    let ind = 0;\r\n    for (; ind < xlen; ind++) {\r\n        res[ind] = xss[ind][pos[ind]];\r\n    }\r\n    return str ? _unchars(res) : res;\r\n};\r\n\r\nconst rotPerm = (xs, ind) => {\r\n    const last = _len(xs) - 1;\r\n    const tmp = xs[ind];\r\n    while (ind < last) { xs[ind] = xs[ind+1]; ind++; }\r\n    xs[last] = tmp;\r\n};\r\n\r\nconst _countE = (e, eq, xs) => {\r\n    const xlen = _len(xs);\r\n    let res = 0;\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        res = res + (eq(e, xs[ind]) ? 1 : 0);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _append = (xs, ys) => arrOrStr(xs, ys) ? cat(xs, ys) : isString(xs) ? cat(_chars(xs), ys) : cat(xs, _chars(ys));\r\nconst _cons = (x, xs) => cat (isString(xs) ? String(x) : [x], xs);\r\nconst _consR = (xs, x) => cat (xs, isString(xs) ? x : [x]);\r\n\r\nconst _rotate = (n, xs) => {\r\n    if (_nul(xs)) return copyAS(xs);\r\n    const xlen = _len(xs);\r\n    const res = Array(xlen);\r\n    let idx = 0;\r\n\r\n    n = n % xlen;\r\n    n = n < 0 ? xlen + n : n;\r\n    idx = _copy(res, xs, xlen - n, xlen, idx);\r\n    _copy(res, xs, 0, xlen - n, idx);\r\n\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _intersperse = (sep, xs) => {\r\n    const xlen = _len(xs);\r\n    if (xlen < 2) return copyAS(xs);\r\n    const len = xlen - 1;\r\n    const res = Array(xlen + len);\r\n    let idx = 0;\r\n    let ind;\r\n\r\n    for (ind = 0; ind < len; ind++) {\r\n        res[idx++] = xs[ind];\r\n        res[idx++] = sep;\r\n    }\r\n    res[idx] = xs[ind];\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst binCoeff = (k, n) => _iterNum (k > n - k ? n - k : k, (x, i) => x * (n - i) / (i + 1), 1);\r\nconst _fact = n => {\r\n    let res = 1;\r\n    while(n > 1) res = res * n--;\r\n    return res;\r\n};\r\n\r\nconst _combinations = (k, xs) => {\r\n    const xlen = _len(xs);\r\n    const str = isString(xs);\r\n    if (k > xlen || k <= 0) return [str ? '' : []];\r\n    const res = Array(binCoeff(k, xlen));\r\n    if (k === 2) return comb2(res, xlen, xs, str, 1);\r\n    const last = xlen - 1;\r\n    const pos = range(k - 1, 0);\r\n    let idx = 0;\r\n    let ind;\r\n\r\n    while (true) {\r\n        res[idx++] = copyComb(pos, xs, str);\r\n        for (ind = 0; pos[ind] >= last - ind;) if (++ind >= k) return res;\r\n        for (pos[ind]++; ind; ind--) pos[ind - 1] = pos[ind] + 1;\r\n    }\r\n};\r\n\r\nconst _repeat = (n, x, fn = _id) => {\r\n    const res = Array(n);\r\n    let ind = 0;\r\n    while (ind < n) res[ind++] = fn(x);\r\n    return res;\r\n};\r\n\r\nconst _combRep = (k, xs) => {\r\n    const xlen = _len(xs);\r\n    const str = isString(xs);\r\n    if (k <= 0) return [str ? '' : []];\r\n    const res = Array(binCoeff(k, xlen + k - 1));\r\n    if (k === 2) return comb2(res, xlen, xs, str, 0);\r\n    const last = xlen - 1;\r\n    const pos = _repeat(k, 0);\r\n    let idx = 0;\r\n    let ind;\r\n\r\n    while (true) {\r\n        res[idx++] = copyComb(pos, xs, str);\r\n        for (ind = 0; pos[ind] >= last;) if (++ind >= k) return res;\r\n        for (pos[ind]++; ind; ind--) pos[ind - 1] = pos[ind];\r\n    }\r\n};\r\n\r\nconst _permutations = (xs, k = _len(xs)) => {\r\n    const xlen = _len(xs);\r\n    const str = isString(xs);\r\n    if (k > xlen || k <= 0) return [str ? '' : []];\r\n    const res = Array(binCoeff(k, xlen) * _fact(k));\r\n    const pos = from(0, xlen);\r\n    const used = range(xlen, xlen - k + 1);\r\n    let idx = 0;\r\n    let i;\r\n\r\n    loop1:\r\n    while (true) {\r\n        res[idx++] = copyPerm(pos, xs, k, str);\r\n        for (i = k - 1; i >= 0; i--) {\r\n            if(--used[i]) { swap(pos, i, xlen - used[i]); continue loop1; }\r\n            rotPerm(pos, i); used[i] = xlen - i;\r\n        }\r\n        return res;\r\n    }\r\n};\r\n\r\nconst _any = (pred, xs) => {\r\n    const len = _len(xs);\r\n    let ind = 0;\r\n    \r\n    while (ind < len) {\r\n         if (pred(xs[ind], ind)) return true;\r\n         ind++;\r\n    }\r\n    return false;\r\n};\r\n\r\nconst _all = (pred, xs) => {\r\n    const len = _len(xs);\r\n    let ind = 0;\r\n    \r\n    while (ind < len) {\r\n         if (!pred(xs[ind], ind)) return false;\r\n         ind++;\r\n    }\r\n    return true;\r\n};\r\n\r\nconst _cycle = (n, xs) => {\r\n    if (_nul(xs)) return emptyAS(xs);\r\n    const xlen = _len(xs);\r\n    const res = Array(n);\r\n    let ind = 0, idx = 0;\r\n\r\n    while (idx < n) {\r\n        res[idx++] = xs[ind++];\r\n        if (ind === xlen) ind = 0;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _filter = (pred, xs) => {\r\n    const xlen = _len(xs);\r\n    const res = [];\r\n    let ind = 0;\r\n    let idx = 0;\r\n    \r\n    while (ind < xlen) {\r\n        if(pred(xs[ind], ind)) res[idx++] = xs[ind];\r\n        ind++;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _reject = (pred, xs) => {\r\n    const xlen = _len(xs);\r\n    const res = [];\r\n    let ind = 0;\r\n    let idx = 0;\r\n    \r\n    while (ind < xlen) {\r\n        if(!pred(xs[ind], ind)) res[idx++] = xs[ind];\r\n        ind++;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _partition = (pred, xs) => {\r\n    const xlen = _len(xs);\r\n    const pass = [];\r\n    const fail = [];\r\n    let ind = 0;\r\n    \r\n    while (ind < xlen) {\r\n        (pred(xs[ind], ind) ? pass : fail).push(xs[ind]);\r\n        ind++;\r\n    }\r\n    return isString(xs) ? [_unchars(pass), _unchars(fail)] : [pass, fail];\r\n};\r\n\r\nconst _elemIndexSorted = (e, xs) => {\r\n    let low = 0;\r\n    let high = _len(xs);\r\n    let mid;\r\n    \r\n    while (low < high) {\r\n        mid = (low + high) >>> 1;\r\n        if (e > xs[mid]) low = mid + 1;\r\n        else high = mid;\r\n    }\r\n    return low < _len(xs) && xs[low] === e ? low : -1;\r\n};\r\n\r\nconst _mergeSorted = (xs, ys, res = _merge(xs, ys, gt)) => bothStr(xs, ys) ? _unchars(res) : res;\r\nconst _insertSorted = (e, xs, res = _insert(e, xs, gt)) => isString(xs) ? _unchars(res) : res;\r\n\r\nconst _mergeSortedBy = (fn, xs, ys) => {\r\n    const res = _merge(xs, ys, _len(fn) > 1 ? gt_cmp(fn) : _gt(fn));\r\n    return bothStr(xs, ys) ? _unchars(res) : res;\r\n};\r\n\r\nconst _insertSortedBy = (fn, e, xs) => {\r\n    const res = _insert(e, xs, _len(fn) > 1 ? gt_cmp(fn) : _gt(fn));\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _splitBy = (n, xs) => {\r\n    if (n <= 0) return [];\r\n    const str = isString(xs);\r\n    const len = _len(xs);\r\n    const res = Array(Math.ceil(len / n));\r\n    let idx = 0;\r\n    let ind = 0;\r\n\r\n    while (ind < len) res[idx++] = _slice(xs, ind, ind = ind + n, str);\r\n    return res;\r\n};\r\n\r\nconst _uncharsInner = xs => (xs[1] = _unchars(xs[1]), xs);\r\n\r\nconst _groupBy = (fn, xs, byKey, fn_add) => {\r\n    const res = _group(xs, byKey, _returnL, fn_add, fn);\r\n    if (isString(xs)) {\r\n        const rlen = _len(res);\r\n        const fnn = byKey ? _uncharsInner : _unchars;\r\n        let ind = 0;\r\n        while (ind < rlen) { res[ind] = fnn(res[ind]); ind++; }\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _deleteIndices = (indices, xs, value) => {\r\n    const xlen = _len(xs);\r\n    const ilen = _len(indices);\r\n    const mask = Array(xlen);\r\n    const res = [];\r\n    let ind = 0;\r\n    let idx = 0;\r\n\r\n    while (ind < ilen) mask[indices[ind++]] = true;\r\n\r\n    ind = 0;\r\n    while (ind < xlen) {\r\n        if (mask[ind] === value) res[idx++] = xs[ind];\r\n        ind++;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst outT = (xs, n) => n <= 0 ? emptyAS(xs) : _copyA(xs, 0, _len(xs), isString(xs));\r\nconst outD = (xs, n) => n <= 0 ? _copyA(xs, 0, _len(xs), isString(xs)) : emptyAS(xs);\r\n\r\nconst uncurry = fn => _len(fn) > 1 ? fn : (a, b) => fn(a)(b);\r\n\r\nconst _reverse = xs => {\r\n    const xlen = _len(xs);\r\n    const last = xlen - 1;\r\n    const res = Array(xlen);\r\n    let ind = 0;\r\n    \r\n    while (ind < xlen) {\r\n        res[last - ind] = xs[ind];\r\n        ind++;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _shuffle = xs => {\r\n    const xlen = _len(xs);\r\n    const res = Array (xlen);\r\n    let rand, ind;\r\n    \r\n    for (ind = 0; ind < xlen; ind++) {\r\n        rand = Math.floor ((ind + 1) * Math.random());\r\n        if (rand !== ind) res[ind] = res[rand];\r\n        res[rand] = xs[ind];\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst _flatten = xs => {\r\n    const res = [];\r\n    const fn = xs => {\r\n        const xlen = _len(xs);\r\n        let ind = 0;\r\n        \r\n        while (ind < xlen) {\r\n            if (isArr(xs[ind])) fn(xs[ind]); else res.push(xs[ind]);\r\n            ind++;\r\n        }\r\n    };\r\n    fn(xs);\r\n    return res;\r\n};\r\n\r\nconst _subsequences = xs => {\r\n    const str = isString(xs);\r\n    const xlen = _len(xs);\r\n    if (xlen > 30) return [];\r\n    const count = (1 << xlen);\r\n    const res = Array(count);\r\n    let combs, ind, indx, icom;\r\n\r\n    for (ind = 0; ind < count; ind++){\r\n        combs = []; icom = 0;\r\n        for (indx = 0; indx < xlen; indx++){\r\n            if (ind & (1 << indx)) combs[icom++] = xs[indx];\r\n        }\r\n        res[ind] = str ? _unchars(combs) : combs;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _cartProd = xss => {\r\n    const xlen = _any(x => _len(x) === 0, xss) ? 0 : _len(xss);\r\n    if (xlen === 0) return [];\r\n    const str = _all (isString, xss);\r\n    if (xlen === 2) return _prod(pair, true, xss[0], xss[1]);\r\n    const last = xlen - 1;\r\n    const res = Array(_foldl((z, x) => z * _len(x), 1, xss));\r\n    const pos = _repeat(xlen, 0);\r\n    let idx = 0;\r\n    let ind;\r\n\r\n    while (true) {\r\n        res[idx++] = copyProd(xss, pos, xlen, str);\r\n        ind = last;\r\n        while (true) {\r\n            if (++pos[ind] < _len(xss[ind])) break;\r\n            pos[ind] = 0;\r\n            if (--ind < 0) return res;\r\n        }\r\n    }\r\n};\r\n\r\nconst _diagonals = (xss, left) => {\r\n    const str = _all(isString, xss);\r\n    const m = _len(xss) - 1;\r\n    const n = _len(xss[0]) - 1;\r\n    const len = m + n;\r\n    const res = Array(len);\r\n    let ind, tmp, idx, from, to;\r\n\r\n    for (ind = 0; ind <= len; ind++) {\r\n        from = ind < m ? ind : m;\r\n        to = ind < n ? 0 : ind - n;\r\n        tmp = Array(from - to + 1);\r\n        idx = 0;\r\n        while (from >= to) tmp[idx++] = xss[left ? from : m - from][ind - from--];\r\n        res[ind] = str ? _unchars(tmp) : tmp;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _times = (n, fn) => {\r\n    const res = Array(n);\r\n    let ind = -1;\r\n    while (++ind < n) res[ind] = fn(ind);\r\n    return res;\r\n};\r\n\r\nconst bestMed = (xs, fn, ind, xlen) => {\r\n    let res = xs[ind++];\r\n\r\n    while (ind < xlen) {\r\n        res = fn(xs[ind], res) ? xs[ind] : res;\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst partMed = (xs, low, high, mid, p, gtfn) => {\r\n    while (p !== mid) {\r\n        p = partitionHoare(xs, low, high, gtfn);\r\n        if (p > mid) high = p;\r\n        else if (p < mid) low = p + 1;\r\n    }\r\n    return xs;\r\n};\r\n\r\nconst _median = (xs, gtfn, ltfn, fn) => {\r\n    const xlen = _len(xs);\r\n    if (!xlen) return NaN;\r\n    if (xlen === 1) return fn(xs[0]);\r\n    const mid = (xlen >>> 1) - (even(xlen) ? 1 : 0);\r\n    xs = partMed(copy(xs), 0, xlen - 1, mid, -1, gtfn);\r\n    const first = fn(bestMed(xs, gtfn, 0, mid+1));\r\n    return even(xlen) ? ((first + fn(bestMed(xs, ltfn, mid+1, xlen))) / 2) : first;\r\n};\r\n\r\nconst _sum = xs => {\r\n    const xlen = _len(xs);\r\n    let res = 0;\r\n    let ind = 0;\r\n\r\n    while (ind < xlen) {\r\n        res = res + xs[ind];\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst best = (xs, fn) => {\r\n    const xlen = _len(xs);\r\n    let res = xs[0];\r\n    let ind = 1;\r\n\r\n    while (ind < xlen) {\r\n        res = fn(xs[ind], res) ? xs[ind] : res;\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _nths = (n, ind, xs) => {\r\n    const xlen = _len(xs);\r\n    if (!xlen || n <= 0 || ind >= xlen - 1) return emptyAS(xs);\r\n    ind = trans(ind, xlen);\r\n    const res = Array(Math.floor((xlen - (ind + 1)) / n) + 1);\r\n    let idx = 0;\r\n\r\n    while (ind < xlen) {\r\n        res[idx++] = xs[ind];\r\n        ind = ind + n;\r\n    }\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nconst has = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);\r\n\r\nconst _pick = (keys, obj) => {\r\n    const res = {};\r\n    const klen = _len(keys);\r\n    let ind = 0;\r\n    let key;\r\n\r\n    while (ind < klen) {\r\n        key = keys[ind];\r\n        if (has(obj, key)) res[key] = obj[key];\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _pickBy = (pred, obj) => {\r\n    const res = {};\r\n    const objkeys = keys(obj);\r\n    const klen = _len(objkeys);\r\n    let ind = 0;\r\n    let key;\r\n\r\n    while (ind < klen) {\r\n        key = objkeys[ind];\r\n        if (pred(obj[key], key)) res[key] = obj[key];\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _mapObj = (fn, obj) => {\r\n    const res = {};\r\n    const objkeys = keys(obj);\r\n    const klen = _len(objkeys);\r\n    let ind = 0;\r\n    let key;    \r\n\r\n    while (ind < klen) {\r\n        key = objkeys[ind];\r\n        res[key] = fn(obj[key], key);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _invert = (obj, fn_start, fn_add) => {\r\n    const res = {};\r\n    const arr = isArr(obj);\r\n    const okeys = keys(obj);\r\n    const klen = _len(okeys);\r\n    let ind = 0;\r\n    let key, value;\r\n\r\n    while (ind < klen) {\r\n        key = okeys[ind];\r\n        value = obj[key];\r\n        key = arr ? Number(key) : key;\r\n        res[value] = has(res, value) ? fn_add(res[value], key) : fn_start(key);\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst _elemInd = (e, xs) => {\r\n    const len = _len(xs);\r\n    let ind = 0;\r\n\r\n    while (ind < len) {\r\n        if (e === xs[ind]) return ind;\r\n        ind++;\r\n    }\r\n    return -1;\r\n};\r\n\r\nconst _omit = (keysToDel, obj) => {\r\n    const res = {};\r\n    const objkeys = keys(obj);\r\n    const klen = _len(objkeys);\r\n    let ind = 0;\r\n    let key;    \r\n\r\n    while (ind < klen) {\r\n        key = objkeys[ind];\r\n        if (_elemInd(key, keysToDel) === -1) res[key] = obj[key];\r\n        ind++;\r\n    }\r\n    return res;\r\n};\r\n\r\nconst cloneArr = (xs, stD, stS) => {\r\n    const xlen = _len(xs);\r\n    const res = Array(xlen);\r\n    let ind = 0;\r\n\r\n    stD.push(res); stS.push(xs);\r\n    while (ind < xlen) {\r\n        res[ind] = _clone(xs[ind], stD, stS);\r\n        ind++;\r\n    }\r\n    stD.pop(); stS.pop();\r\n    return res;\r\n};\r\n\r\nconst cloneObj = (obj, stD, stS) => {\r\n    const res = {};\r\n    const objkeys = keys(obj);\r\n    const klen = _len(objkeys);\r\n    let ind = 0;\r\n    let key;    \r\n\r\n    stD.push(res); stS.push(obj);\r\n    while (ind < klen) {\r\n        key = objkeys[ind];\r\n        res[key] = _clone(obj[key], stD, stS);\r\n        ind++;\r\n    }\r\n    stD.pop(); stS.pop();\r\n    return res;\r\n};\r\n\r\nconst _clone = (obj, stD, stS) => {\r\n    if (prim(obj)) return obj;\r\n    const type = toString.call(obj);\r\n    if (type === '[object Date]') return new Date(obj.valueOf());\r\n    stD = stD || []; stS = stS || [];\r\n    const index = _elemInd(obj, stS);\r\n    return index !== -1 ? stD[index] : (type === '[object Array]' ? cloneArr : cloneObj) (obj, stD, stS);\r\n};\r\n\r\nconst _ordered = (xs, fn) => {\r\n    const xlen = _len(xs);\r\n    let ind = 1;\r\n\r\n    while (ind < xlen) {\r\n        if (fn(xs[ind-1], xs[ind])) return false;\r\n        ind++;\r\n    }\r\n    return true;\r\n};\r\n\r\nconst _sortN = (n, xs, sortfn, partfn) => {\r\n    if (n <= 0) return emptyAS(xs);\r\n    if (n >= _len(xs)) return sortfn(xs);\r\n    const res = sortfn(take (n) (partMed(copy(xs), 0, _len(xs)-1, n-1, -1, partfn)));\r\n    return isString(xs) ? _unchars(res) : res;\r\n}\r\n\r\nconst gtfn = fn => _len(fn) > 1 ? gt_cmp(fn) : _gt(fn);\r\nconst ltfn = fn => _len(fn) > 1 ? lt_cmp(fn) : _lt(fn);\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n// current version of the library\r\nexport const VERSION = '1.0.0';\r\n\r\n// Basic functions\r\nexport const cp = (...fns) => arg => _cp(fns, arg);\r\nexport const chain = (...fns) => arg => _chain(fns, arg);\r\n\r\nexport const append = xs => ys => _append(xs, ys);\r\nexport const head = xs => xs[0];\r\nexport const last = xs => xs[_len(xs) - 1];\r\nexport const init = xs => _copyA(xs, 0, _nul(xs) ? 0 : _len(xs) - 1, isString(xs));\r\nexport const tail = xs => _slice(xs, _nul(xs) ? 0 : 1, _len(xs), isString(xs));\r\nexport const nul = _nul;\r\nexport const len = _len;\r\nexport const copy = xs => _copyA(xs,0,_len(xs));\r\nexport const cons = x => xs => _cons(x, xs);\r\nexport const consR = xs => x => _consR(xs, x);\r\nexport const uncons = xs => [head(xs), tail(xs)];\r\nexport const nth = ind => xs => xs[ind + (ind < 0 ? _len(xs) : 0)];\r\nexport const each = fn => xs => _each(fn, xs);\r\nexport const id = _id;\r\nexport const flip = fn => x => y => fn (y) (x);\r\nexport const not = x => !x;\r\nexport const iter = npred => fn => x => _iter (npred, fn, x);\r\nexport const until = pred => fn => x => _until(pred, fn, x);\r\nexport const equal = (x, y) => _equal(x, y);\r\nexport const eq = x => y => _equal(x, y);\r\nexport const equalBy = _eq;\r\n\r\n\r\n// List transformations\r\nexport const map = fn => xs => _map(fn, xs);\r\n\r\nexport const concat = xss => _concat(xss, _id, _foldl((z, x) => z + _len(x), 0, xss));\r\nexport const concatMap = fn => xs => _concat(xs, fn, 0);\r\n\r\nexport const reverse = _reverse;\r\nexport const rotate = n => xs => _rotate(n, xs);\r\nexport const intersperse = sep => xs => _intersperse(sep, xs);\r\n\r\nexport const group = xs => _groupBy(_id, xs, false, fn_push);\r\nexport const count = xs => _group(xs, true, fn_one, fn_count, _id);\r\nexport const section = xs => _section(xs, _equal, secFn);\r\nexport const sectionH = xs => _section(xs, _equal, secHFn, true);\r\nexport const sectionBy = fn => xs => _section(xs, _len(fn) > 1 ? fn : _eq(fn), secFn);\r\nexport const sectionHBy = fn => xs => _section(xs, _len(fn) > 1 ? fn : _eq(fn), secHFn, true);\r\nexport const splitBy = n => xs => _splitBy(n, xs);\r\n\r\nexport const shuffle = _shuffle;\r\nexport const flatten = _flatten;\r\nexport const prod = xs => ys => _prod(pair, true, xs, ys);\r\n\r\nexport const diags1 = xss => _diagonals(xss, true);\r\nexport const diags2 = xss => _diagonals(xss, false);\r\n\r\n\r\n// Combinatorics\r\nexport const subsequences = _subsequences;\r\nexport const cartProd = _cartProd;\r\nexport const combinations = k => xs => _combinations(k, xs);\r\nexport const combRep = k => xs => _combRep(k, xs);\r\nexport const permutations = xs => _permutations(xs);\r\nexport const permK = k => xs => _permutations(xs, k);\r\nexport const permRep = k => xs => cartProd (_repeat (k, xs));\r\n\r\nexport const bindL = xs => fn => _concat (xs, fn, 0);\r\nexport const returnL = _returnL;\r\nexport const guardL = b => fn => b ? fn(0) : [];\r\nexport const liftM2L = fn => xs => ys => _prod(uncurry(fn), false, xs, ys);\r\nexport const foldM = fn => z => xs => _foldr ((x, res) => a => bindL(fn(a, x))(res), _returnL, xs) (z);\r\n\r\nexport const bindR = fn1 => fn2 => x => fn2 (fn1 (x)) (x);\r\nexport const returnR = x => () => x;\r\nexport const liftM2R = fn => fn1 => fn2 => x => uncurry(fn) (fn1(x), fn2(x));\r\n\r\nexport const divx = fn1 => fn2 => x => [fn1 (x), fn2 (x)];\r\n\r\n\r\n// Math\r\nexport const add = (x, y) => y === undefined ? y => x + y : x + y;\r\nexport const sub = (x, y) => y === undefined ? y => x - y : x - y;\r\nexport const mul = (x, y) => y === undefined ? y => x * y : x * y;\r\nexport const div = (x, y) => y === undefined ? y => x / y : x / y;\r\nexport const fact = _fact;\r\nexport const negate = x => -x;\r\n\r\nexport const even = n => n % 2 === 0;\r\nexport const odd = n => n % 2 !== 0;\r\nexport const sq = x => x * x;\r\nexport const sqrt = Math.sqrt;\r\nexport const inc = _inc;\r\nexport const dec = x => x - 1;\r\n\r\nexport const max = (x, y) => y > x ? y : x;\r\nexport const min = (x, y) => y < x ? y : x;\r\n\r\nexport const random = (min, max) => min <= max ? min + Math.floor((max - min + 1) * Math.random()) : random(max, min);\r\nexport const choice = xs => xs[random(0, _len(xs) - 1)];\r\n\r\n\r\n// Objects\r\nexport const copyO = obj => Object.assign({}, obj);\r\nexport const clone = obj => _clone(obj);\r\n\r\nexport const pick = (...keys) => obj => _pick(keys, obj);\r\nexport const pickBy = pred => obj => _pickBy(pred, obj);\r\nexport const mapO = fn => obj => _mapObj(fn, obj);\r\nexport const select = (...keys) => objs => map (pick(...keys)) (objs);\r\nexport const invert = obj => _invert(obj, _id, (_,key) => key);\r\nexport const invertAll = obj => _invert(obj, returnL, grOAdd);\r\nexport const extend = obj1 => obj2 => Object.assign({}, obj1, obj2);\r\nexport const omit = (...keys) => obj => _omit(keys, obj);\r\n\r\n\r\n// Reducing lists\r\nexport const foldl = fn => z => xs => _foldl(fn, z, xs);\r\nexport const foldr = fn => z => xs => _foldr(fn, z, xs);\r\nexport const foldl1 = fn => xs => _foldl(fn, NUL, xs);\r\nexport const foldr1 = fn => xs => _foldr(fn, NUL, xs);\r\n\r\nexport const any = pred => xs => _any(pred, xs);\r\nexport const all = pred => xs => _all(pred, xs);\r\n\r\nexport const none = pred => xs => !_any(pred, xs);\r\nexport const or = xs => _any(_id, xs);\r\nexport const and = xs => _all(_id, xs);\r\n\r\nexport const sum = _sum;\r\nexport const product = xs => _foldl (mul, 1, xs);\r\nexport const mean = xs => sum(xs) / _len(xs);\r\nexport const median = xs => _median(xs, gt, lt, _id);\r\nexport const sumBy = fn => xs => _foldl ((z, x) => z + fn(x), 0, xs);\r\nexport const meanBy = fn => xs => sumBy (fn) (xs) / _len(xs);\r\nexport const medianBy = fn => xs => _median(xs, _gt(fn), _lt(fn), fn);\r\n\r\nexport const maximum = xs => best (xs, gt);\r\nexport const minimum = xs => best (xs, lt);\r\n\r\nexport const maxLen = xss => _len(xss) ? _len(best (xss, _gt(_len))) : undefined;\r\nexport const minLen = xss => _len(xss) ? _len(best (xss, _lt(_len))) : undefined;\r\n\r\nexport const uniq = xs => _isUniq(xs, _id);\r\n\r\nexport const countElem = e => xs => _countE(e, _equal, xs);\r\nexport const countSeq = xs => ys => _seqAll(xs, ys, 0, _inc, NUL);\r\nexport const toObj = xss => _foldl ((z, p) => (z[p[0]] = p[1], z), {}, xss);\r\n\r\n\r\n// Building lists\r\nexport const scanl = fn => z => xs => _scanl(fn, z, xs);\r\nexport const scanr = fn => z => xs => _scanr(fn, z, xs);\r\nexport const scanl1 = fn => xs => _scanl(fn, NUL, xs);\r\nexport const scanr1 = fn => xs => _scanr(fn, NUL, xs);\r\n\r\nexport const iterate = npred => fn => x => _iterate (npred, fn, x);\r\nexport const untilA = pred => fn => x => _untilA(pred, fn, x);\r\nexport const times = n => fn => _times(n, fn);\r\nexport const repeat = (n, x) => isString(x) ? (n<0?'':x.repeat(n)) : _repeat(n,x,prim(x)?_id:isArr(x)?copy:copyO);\r\nexport const replicate = (n, x) => _repeat(n, x, prim(x) ? _id : clone);\r\nexport const cycle = (n, xs) => _cycle(n, xs);\r\n\r\nexport const from = (first, n, step = 1) => {\r\n    if (step === 0) step = 1;\r\n    const str = isString(first);\r\n    return _from (str ? ord(first) : first, n, step, str, 0);\r\n};\r\n\r\nexport const range = (first, last, step = 1) => {\r\n    if (step === 0) step = 1;\r\n    const str = isString(first) && isString(last);\r\n    if (str) {\r\n        first = ord(first);\r\n        last = ord(last);\r\n    }\r\n\r\n    const step_abs = Math.abs(step);\r\n    const n = Math.ceil ((Math.abs(last - first) + 1) / step_abs);\r\n\r\n    return _from (first, n, first > last ? -step_abs : step_abs, str, 0);\r\n};\r\n\r\nexport const keys = Object.keys;\r\nexport const values = Object.values || (obj => _map (key => obj[key], keys(obj)));\r\nexport const entries = Object.entries || (obj => _map (key => [key, obj[key]], keys(obj)));\r\n\r\n\r\n// Sublists\r\nexport const take = n => xs => n <= 0 || n > _len(xs) ? outT(xs, n) : _copyA(xs, 0, n, isString(xs));\r\nexport const drop = n => xs => n <= 0 || n > _len(xs) ? outD(xs, n) : _slice(xs, n, _len(xs), isString(xs));\r\nexport const takeLast = n => xs => drop (_len(xs) - n) (xs);\r\nexport const dropLast = n => xs => take (_len(xs) - n) (xs);\r\nexport const takeFrom = ind => n => xs => n <= 0 ? emptyAS(xs) : _slice(xs,ind,trans(ind,_len(xs))+n,isString(xs));\r\nexport const splitAt = n => xs => [take(n) (xs), drop(n) (xs)];\r\n\r\nexport const takeWhile = pred => xs => _while(take, pred, xs);\r\nexport const dropWhile = pred => xs => _while(drop, pred, xs);\r\nexport const span = pred => xs => _while(splitAt, pred, xs);\r\n\r\nexport const takeLastWhile = pred => xs => _whileLast(drop, pred, xs);\r\nexport const dropLastWhile = pred => xs => _whileLast(take, pred, xs);\r\nexport const spanLast = pred => xs => _whileLast(splitAt, pred, xs);\r\n\r\nexport const nths = (n, start = 0) => xs => _nths(n, start, xs);\r\nexport const tails = xs => _inits (xs, 0, _len(xs), 1, tail);\r\nexport const inits = xs => _inits (xs, _len(xs), _len(xs), -1, init);\r\n\r\n\r\n// Searching\r\nexport const elem = e => xs => _elemBy(e, xs, _equal);\r\nexport const notElem = e => xs => !_elemBy(e, xs, _equal);\r\nexport const elemSorted = e => xs => _elemIndexSorted(e, xs) !== -1;\r\n\r\nexport const startsWith = xs => ys => prefix (xs, ys, _len(xs), 0);\r\nexport const endsWith = xs => ys => prefix (xs, ys, _len(xs), _len(ys) - _len(xs));\r\nexport const seq = xs => ys => _seq (xs, ys) !== -1;\r\n\r\nexport const find = pred => xs => _find (pred, xs);\r\nexport const filter = pred => xs => _filter(pred, xs);\r\nexport const reject = pred => xs => _reject(pred, xs);\r\nexport const findLast = pred => xs => _findLast (pred, xs);\r\nexport const partition = pred => xs => _partition(pred, xs);\r\n\r\n\r\n// Indexing\r\nexport const elemIndex = e => xs => _index(xs, e);\r\nexport const elemIndices = e => xs => _elemIndices(fn_eq, _equal, [], xs, e);\r\nexport const elemIndexLast = e => xs => _indexLast(_equal, xs, e);\r\nexport const findIndex = pred => xs => _find (pred, xs, true);\r\nexport const findIndices = pred => xs => _elemIndices(fn_each, pred, [], xs);\r\nexport const findIndexLast = pred => xs => _findLast (pred, xs, true);\r\n\r\nexport const elemIndexSorted = e => xs => _elemIndexSorted(e, xs);\r\n\r\nexport const seqIndex = xs => ys => _seq (xs, ys);\r\nexport const seqIndices = xs => ys => _seqAll (xs, ys, [], _indices, NUL);\r\n\r\n\r\n// Zipping\r\nexport const zip = xs => ys => _zip (pair, true, xs, ys);\r\nexport const zipWith = fn => xs => ys => _zip (uncurry(fn), false, xs, ys);\r\nexport const unzip = xss => _len(xss)===2?_zip(pair,true,xss[0],xss[1]):_unzip(xss,_len(xss)===3?_zip3:_zipM,minLen);\r\nexport const transpose = unzip;\r\nexport const tpLongest = xss => _unzip(xss, _zipLongest, maxLen);\r\nexport const rotateL = xss => _unzip(xss, _rotLeft, minLen);\r\nexport const rotateR = xss => _unzip(xss, _rotRight, minLen);\r\n\r\n\r\n// Special lists\r\nexport const lines = str => str.split('\\n');\r\nexport const words = str => str.split(' ');\r\nexport const chars = _chars;\r\nexport const split = sep => str => str.split(sep);\r\nexport const toLower = str => str.toLowerCase();\r\nexport const toUpper = str => str.toUpperCase();\r\nexport const trim = str => str.trim();\r\nexport const ord = chr => chr.charCodeAt(0);\r\n\r\nexport const unlines = arr => arr.join('\\n');\r\nexport const unwords = arr => arr.join(' ');\r\nexport const unchars = _unchars;\r\nexport const join = sep => arr => arr.join(sep);\r\nexport const chr = ord => String.fromCharCode(ord);\r\n\r\nexport const upper = c => isChar(c) && c[0] !== toLower(c[0]);\r\nexport const lower = c => isChar(c) && c[0] !== toUpper(c[0]);\r\nexport const alpha = c => isChar(c) && toUpper(c[0]) !== toLower(c[0]);\r\nexport const digit = c => isChar(c) && '0' <= c[0]  && c[0] <= '9';\r\nexport const space = c => isChar(c) && (c = ord(c[0]), c === 32 || (c > 8 && c < 14));\r\nexport const alnum = c => alpha(c) || digit(c);\r\n\r\n\r\n// Deleting\r\nexport const del = e => xs => bothStr(e, xs) ? xs.replace(e,'') : secc(_index(xs, e), 1, xs, false, NUL);\r\nexport const delAll = e => xs => _delAll(e, xs, NUL);\r\nexport const deleteSeq = seq => xs => secc(_seq(seq, xs), _len(seq), xs, true, NUL);\r\nexport const deleteSeqAll = seq => xs => _seqAll (seq, xs, [], _delall);\r\nexport const deleteAt = ind => xs => _sec(ind, 1, xs, false, NUL);\r\nexport const deleteFrom = ind => n => xs => _sec(ind, n, xs, true, NUL);\r\n\r\nexport const deleteIndices = indices => xs => _deleteIndices(indices, xs);\r\nexport const keepIndices = indices => xs => _deleteIndices(indices, xs, true);\r\n\r\nexport const replace = e => toIns => xs => bothStr(e,xs) ? xs.replace(e,toIns) : secc(_index(xs,e),1,xs,false,toIns);\r\nexport const replaceAll = e => toIns => xs => _delAll(e, xs, toIns);\r\nexport const replaceSeq = seq => toIns => xs => secc(_seq(seq, xs), _len(seq), xs, true, toIns);\r\nexport const replaceSeqAll = seq => toIns => xs => _seqAll(seq, xs, [], _delall, toIns);\r\nexport const replaceAt = ind => toIns => xs => _sec(ind, 1, xs, false, toIns);\r\nexport const replaceFrom = ind => n => toIns => xs => _sec(ind, n, xs, true, toIns);\r\n\r\nexport const insertAt = ind => e => xs => _sec(ind, 0, xs, false, e, gt);\r\nexport const insertSeqAt = ind => seq => xs => _sec(ind, 0, xs, true, seq, gt);\r\n\r\n\r\n// Set operations\r\nexport const nub = xs => ops(nubSet, nubSet, null, xs, _id);\r\nexport const minus = xs => ys => ops(writeMap, readMap, xs, ys, _id);\r\nexport const deleteAll = xs => ys => ops(newSet, _dall, ys, xs, _id);\r\nexport const keepAll = xs => ys => ops(newSet, _keep, ys, xs, _id);\r\nexport const intersect = xs => ys => ops(newSet, intSet, xs, ys, _id);\r\nexport const difference = xs => ys => ops(newSet, nubSet, xs, ys, _id);\r\nexport const union = xs => ys => ops(nubSet, nubSet, ys, xs, _id);\r\n\r\nexport const nubSorted = xs => {\r\n    if (_nul(xs)) return copyAS(xs);\r\n    const res = _nubSorted(xs, [], ad);\r\n    return isString(xs) ? _unchars(res) : res;\r\n};\r\n\r\nexport const minusSorted = xs => ys => mdk(xs, ys, _inc, true);\r\nexport const deleteAllSorted = xs => ys => mdk(ys, xs, _id, true);\r\nexport const keepAllSorted = xs => ys => mdk(ys, xs, _id, false);\r\nexport const intersectSorted = xs => ys => isd(xs, ys, _inc, false);\r\nexport const differenceSorted = xs => ys => isd(xs, ys, _id, true);\r\nexport const unionSorted = xs => ys => _union(xs, ys);\r\n\r\n\r\n// Sorting\r\nexport const asc = fn => (x, y) => _cmp (fn(x), fn(y));\r\nexport const desc = fn => (x, y) => _desc (fn(x), fn(y));\r\n\r\nexport const cmp = (...fns) => (x, y) => {\r\n    const flen = _len(fns);\r\n    let res = 0;\r\n    let ind = 0;\r\n\r\n    while (res === 0 && ind < flen) res = fns[ind++](x, y);\r\n    return res;\r\n};\r\n\r\nexport const sort = xs => qsort(xs, gt);\r\nexport const sortDesc = xs => qsort(xs, lt);\r\n\r\nexport const sortBy = fn => xs => msort(xs, gtfn(fn));\r\nexport const sortDescBy = fn => xs => msort(xs, ltfn(fn));\r\n\r\nexport const sortN = n => xs => _sortN(n, xs, sort, gt);\r\nexport const sortNDesc = n => xs => _sortN(n, xs, sortDesc, lt);\r\nexport const sortNBy = n => fn => xs => _sortN(n, xs, sortBy(fn), gtfn(fn));\r\nexport const sortNDescBy = n => fn => xs => _sortN(n, xs, sortDescBy(fn), ltfn(fn));\r\n\r\nexport const merge = xs => ys => _mergeSorted(xs, ys);\r\nexport const insert = e => xs => _insertSorted(e, xs);\r\n\r\nexport const mergeBy = fn => xs => ys => _mergeSortedBy(fn, xs, ys);\r\nexport const insertBy = fn => e => xs => _insertSortedBy(fn, e, xs);\r\n\r\nexport const maxBy = fn => (x, y) => gtfn(fn) (y, x) ? y : x;\r\nexport const minBy = fn => (x, y) => ltfn(fn) (y, x) ? y : x;\r\nexport const maximumBy = fn => xs => best (xs, gtfn(fn));\r\nexport const minimumBy = fn => xs => best (xs, ltfn(fn));\r\n\r\nexport const ordered = xs => _ordered(xs, gt);\r\nexport const orderedBy = fn => xs => _ordered(xs, gtfn(fn));\r\n\r\n\r\n// The \"By\" operations\r\nexport const nubBy = fn => xs => _len(fn) > 1 ? _nubBy(xs, fn) : ops(nubSet, nubSet, null, xs, fn);\r\nexport const minusBy = fn => xs => ys => _len(fn) > 1 ? _minusBy(xs,ys,fn) : ops(writeMap,readMap,xs,ys,fn);\r\nexport const deleteAllBy = fn => xs => ys => _len(fn) > 1 ? _dkdi(ys,xs,dallBy,fn) : ops(newSet,_dall,ys,xs,fn);\r\nexport const keepAllBy = fn => xs => ys => _len(fn) > 1 ? _dkdi(ys,xs,kallBy,fn) : ops(newSet,_keep,ys,xs,fn);\r\nexport const intersectBy = fn => xs => ys => _len(fn) > 1 ? _dkdi(xs,ys,intsBy,fn) : ops(newSet,intSet,xs,ys,fn);\r\nexport const differenceBy = fn => xs => ys => _len(fn) > 1 ? _dkdi(xs,ys,diffBy,fn) : ops(newSet,nubSet,xs,ys,fn);\r\nexport const unionBy = fn => xs => ys => _len(fn) > 1 ? _unionBy(xs, ys, fn) : ops(nubSet, nubSet, ys, xs, fn);\r\n\r\nexport const uniqBy = fn => xs => _len(fn) > 1 ? _uniqBy(xs, fn) : _isUniq(xs, fn);\r\nexport const elemBy = fn => e => xs => _elemBy(e, xs, _len(fn) > 1 ? fn : _eq(fn));\r\n\r\nexport const groupBy = fn => xs => _len(fn) > 1 ? gcBy(xs, groupAdd, groupInc, fn, true):_groupBy(fn,xs,false,fn_push);\r\nexport const countBy = fn => xs => _len(fn) > 1 ? gcBy(xs, countAdd, countInc, fn): _group(xs,true,fn_one,fn_count,fn);\r\n\r\nexport const grouppBy = fn => xs => _groupBy(fn, xs, true, fn_push_K);\r\n\r\nexport const groupOBy = fn => xs => _groupObj(xs, returnL, grOAdd, fn, true);\r\nexport const countOBy = fn => xs => _groupObj(xs, fn_one, inc, fn);"]}